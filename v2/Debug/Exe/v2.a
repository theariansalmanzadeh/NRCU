;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 3/31/2022
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// I2C Bus functions
;#include <i2c.h>
;
;// DS1307 Real Time Clock functions
;#include <ds1307.h>
;#include <alcd.h>
;#include <delay.h>
;#include <stdio.h>
;#include <twi.h>
;
;
;//#define high_light_off  2
;//#define high_light_on 3
;#define first_time_on 13
;
;// Declare your global variables here
;char first_time =1;
;char hr=12 , min=0 ,sec=58;
;char current_hr, current_min, current_sec , time_cycle = 6;
;char change_cycle , change_hr , change_min , changed_sec =0;
;char cycle_hr , cycle_min;
;char light_cycle = 0, change_light , light_on=0;
;
;void showing_time(void)
; 0000 0032 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0033 char lcd_array[20];
; 0000 0034  rtc_get_time(&current_hr, &current_min, &current_sec);
;PCODE: $0000000F VOL: 0
;	lcd_array -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0035  if(changed_sec != current_sec)
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0036  {
; 0000 0037      lcd_gotoxy(0,0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0038      sprintf(lcd_array , "%02d:%02d:%02d" , current_hr , current_min , current_sec);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0039      lcd_puts(lcd_array);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 003A      lcd_gotoxy(0,1);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003B      sprintf(lcd_array , "cycle time: %d" , time_cycle);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 003C      lcd_puts(lcd_array);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 003D      changed_sec = current_sec;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003E  }
; 0000 003F  delay_ms(20);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0040 }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;
;void changeInt0(char state)
; 0000 0043 {
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0044     if(state ==0)
;PCODE: $0000004E VOL: 0
;	state -> Y+0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0045     {
; 0000 0046      GICR=(0<<INT1) | (0<<INT0) | (0<<INT2);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0047 
; 0000 0048     }
; 0000 0049 
; 0000 004A     else
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004B     GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 004C }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0050 {
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0051     #asm("cli");
;PCODE: $0000005F VOL: 0
	cli
;PCODE: $00000060 VOL: 0
; 0000 0052 
; 0000 0053  hr = current_hr +1;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0054 
; 0000 0055  if(hr == 24)
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0056  {
; 0000 0057     hr = 0;
;PCODE: $00000067 VOL: 0
; 0000 0058  }
; 0000 0059  change_hr = 1;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 005A  changeInt0(0);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 005B 
; 0000 005C }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0060 {
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0061  min = current_min +1;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0062  if(min == 60)
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0063  {
; 0000 0064     min = 0;
;PCODE: $00000078 VOL: 0
; 0000 0065  }
; 0000 0066  change_min = 1;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0067 
; 0000 0068 }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;
;// External Interrupt 2 service routine
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 006C {
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 006D if(light_cycle == 1)
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006E PORTB ^=  2;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 006F 
; 0000 0070 }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;
;void main(void)
; 0000 0073 {
;PCODE: $0000008C VOL: 0
; 0000 0074 // Declare your local variables here
; 0000 0075 
; 0000 0076 // Input/Output Ports initialization
; 0000 0077 // Port A initialization
; 0000 0078 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0079 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 007A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007B PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 007C 
; 0000 007D // Port B initialization
; 0000 007E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007F DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0080 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0081 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0082 
; 0000 0083 // Port C initialization
; 0000 0084 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0085 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0086 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0087 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0088 
; 0000 0089 // Port D initialization
; 0000 008A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 008B DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 008C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 008D PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 008E 
; 0000 008F // Timer/Counter 0 initialization
; 0000 0090 // Clock source: System Clock
; 0000 0091 // Clock value: Timer 0 Stopped
; 0000 0092 // Mode: Normal top=0xFF
; 0000 0093 // OC0 output: Disconnected
; 0000 0094 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0095 TCNT0=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0096 OCR0=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0097 
; 0000 0098 // Timer/Counter 1 initialization
; 0000 0099 // Clock source: System Clock
; 0000 009A // Clock value: Timer1 Stopped
; 0000 009B // Mode: Normal top=0xFFFF
; 0000 009C // OC1A output: Disconnected
; 0000 009D // OC1B output: Disconnected
; 0000 009E // Noise Canceler: Off
; 0000 009F // Input Capture on Falling Edge
; 0000 00A0 // Timer1 Overflow Interrupt: Off
; 0000 00A1 // Input Capture Interrupt: Off
; 0000 00A2 // Compare A Match Interrupt: Off
; 0000 00A3 // Compare B Match Interrupt: Off
; 0000 00A4 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00A5 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00A6 TCNT1H=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00A7 TCNT1L=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00A8 ICR1H=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00A9 ICR1L=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00AA OCR1AH=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00AB OCR1AL=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00AC OCR1BH=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00AD OCR1BL=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00AE 
; 0000 00AF // Timer/Counter 2 initialization
; 0000 00B0 // Clock source: System Clock
; 0000 00B1 // Clock value: Timer2 Stopped
; 0000 00B2 // Mode: Normal top=0xFF
; 0000 00B3 // OC2 output: Disconnected
; 0000 00B4 ASSR=0<<AS2;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00B5 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00B6 TCNT2=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00B7 OCR2=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00B8 
; 0000 00B9 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00BA TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00BB 
; 0000 00BC // External Interrupt(s) initialization
; 0000 00BD // INT0: On
; 0000 00BE // INT0 Mode: Falling Edge
; 0000 00BF // INT1: On
; 0000 00C0 // INT1 Mode: Falling Edge
; 0000 00C1 // INT2: On
; 0000 00C2 // INT2 Mode: Falling Edge
; 0000 00C3 GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00C4 MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00C5 MCUCSR=(0<<ISC2);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00C6 GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00C7 
; 0000 00C8 // USART initialization
; 0000 00C9 // USART disabled
; 0000 00CA UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00CB 
; 0000 00CC // Analog Comparator initialization
; 0000 00CD // Analog Comparator: Off
; 0000 00CE // The Analog Comparator's positive input is
; 0000 00CF // connected to the AIN0 pin
; 0000 00D0 // The Analog Comparator's negative input is
; 0000 00D1 // connected to the AIN1 pin
; 0000 00D2 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00D3 SFIOR=(0<<ACME);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00D4 
; 0000 00D5 // ADC initialization
; 0000 00D6 // ADC disabled
; 0000 00D7 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00D8 
; 0000 00D9 // SPI initialization
; 0000 00DA // SPI disabled
; 0000 00DB SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00DC 
; 0000 00DD // TWI initialization
; 0000 00DE // TWI disabled
; 0000 00DF TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00E0 
; 0000 00E1 // Bit-Banged I2C Bus initialization
; 0000 00E2 // I2C Port: PORTA
; 0000 00E3 // I2C SDA bit: 1
; 0000 00E4 // I2C SCL bit: 0
; 0000 00E5 // Bit Rate: 100 kHz
; 0000 00E6 // Note: I2C settings are specified in the
; 0000 00E7 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 00E8 i2c_init();
;PCODE: $000000D6 VOL: 0
; 0000 00E9 
; 0000 00EA // DS1307 Real Time Clock initialization
; 0000 00EB // Square wave output on pin SQW/OUT: Off
; 0000 00EC // SQW/OUT pin state: 0
; 0000 00ED rtc_init(0,0,0);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00EE 
; 0000 00EF // Global enable interrupts
; 0000 00F0 #asm("sei")
;PCODE: $000000DD VOL: 0
	sei
;PCODE: $000000DE VOL: 0
; 0000 00F1 
; 0000 00F2 i2c_init();
;PCODE: $000000DF VOL: 0
; 0000 00F3 
; 0000 00F4 lcd_init(16);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00F5 lcd_putsf("amir1");
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00F6 lcd_gotoxy(0,1);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00F7 lcd_putsf("project");
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00F8 delay_ms(1000);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00F9 lcd_clear();
;PCODE: $000000EE VOL: 0
; 0000 00FA 
; 0000 00FB lcd_putsf("test lights");
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00FC PORTB.0= 1;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00FD 
; 0000 00FE delay_ms(1000);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00FF lcd_clear();
;PCODE: $000000F6 VOL: 0
; 0000 0100 PORTB.0= 0;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0101 PORTB.1= 0;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0102 rtc_init(1,1,1);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0103 rtc_set_time(hr , min , sec);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0104 
; 0000 0105 
; 0000 0106 while (1)
;PCODE: $00000105 VOL: 0
; 0000 0107       {
; 0000 0108        if(change_hr == 1 || change_min == 1 || change_cycle == 1)
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0109        {
; 0000 010A         if(change_hr == 1)
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 010B         {
; 0000 010C           change_hr = 0;
;PCODE: $00000114 VOL: 0
; 0000 010D 
; 0000 010E           rtc_get_time(&current_hr , &current_min, &current_sec);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 010F           rtc_set_time(hr , current_min, current_sec);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0110           changeInt0(1);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0111 
; 0000 0112         }
; 0000 0113         else if(change_min == 1)
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0114         {
; 0000 0115           change_min = 0;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0116           rtc_get_time(&current_hr , &current_min, &current_sec);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0117           rtc_set_time(current_hr , min, current_sec);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0118         }
; 0000 0119         else if(change_cycle == 1)
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 011A         {
; 0000 011B           change_cycle = 0;
;PCODE: $00000137 VOL: 0
; 0000 011C 
; 0000 011D         }
; 0000 011E        }
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 011F        showing_time();
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0120        if(hr == first_time_on && first_time == 1)
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0121        {
; 0000 0122          light_cycle =1;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0123          cycle_hr = hr + time_cycle;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0124          first_time = 0;
;PCODE: $0000014C VOL: 0
; 0000 0125          PORTB |= 1;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0126        }
; 0000 0127        else if( current_hr == cycle_hr && first_time == 0)
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0128        {
; 0000 0129          light_cycle ^=1;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 012A          cycle_hr = current_hr +time_cycle;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 012B          if(cycle_hr >= 24)
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 012C          {
; 0000 012D             cycle_hr /=24;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 012E          }
; 0000 012F //         if(light_cycle == 0)
; 0000 0130 //         {
; 0000 0131 //           PORTB &= ~(0x03);
; 0000 0132 //         }
; 0000 0133 //         else
; 0000 0134 //         {
; 0000 0135 //            PORTB ^=1;
; 0000 0136 //         }
; 0000 0137 
; 0000 0138        }
;PCODE: $00000169 VOL: 0
; 0000 0139       }
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 013A 
; 0000 013B }
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
